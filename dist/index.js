(()=>{var __webpack_modules__={693:(e,t,s)=>{const r=s(50);const n=s(716);const i=s(297);e.exports=class{constructor({githubEvent:e,argv:t,config:s,githubToken:r}){this.Jira=new n({baseUrl:s.baseUrl,token:s.token,email:s.email});this.GitHub=new i({token:r});this.config=s;this.argv=t;this.githubEvent=e;this.githubToken=r}async execute(){const{argv:e,githubEvent:t,config:s}=this;const r=e.project;const n=e.issuetype;const i=e.label;let o=[];if(t.pull_request.title.indexOf("automerge_release")!==-1){console.log("Automerge is excluded from this action");return}const a=s.issue?await this.Jira.getIssue(s.issue):null;const u=t.pull_request.html_url.indexOf("Desktop")!==-1?"D":"M";if(Number(t.pull_request.commits)>0){o=await this.findEslintInPr(t.repository,t.pull_request.number)}if(o.length===0){console.log("no eslint-disables found :)");return}const{projects:c}=await this.Jira.getCreateMeta({expand:"projects.issuetypes.fields",projectKeys:r,issuetypeNames:n});if(c.length===0){console.error(`project '${r}' not found`);return}const[l]=c;if(l.issuetypes.length===0){console.error(`issuetype '${n}' not found`);return}const p=o.map((async({content:s,route:o})=>{let c=[{key:"project",value:{key:r}},{key:"issuetype",value:{name:n}},{key:"summary",value:`${u} - Refactor in order to remove eslint disable: ${s}`},{key:"assignee",value:{accountId:a?a.fields.assignee.accountId:"5faa5f3a8405b10077a8fd7e"}},{key:"customfield_12601",value:{value:a?a.fields.customfield_12601.value:"Gusa Growth"}},{key:"customfield_14613",value:{value:"NO"}},{key:"labels",value:i?[i]:["ESlint"]},{key:"description",value:`Can be found in the following file: ${o.slice(5)}\n        \n        \n        \n        Action was triggered by this PR: ${t.pull_request.html_url}\n        `}];if(r==="UVP"){c=[...c,{key:"customfield_14620",value:{value:"UVP/UHC FE"}},{key:"customfield_14621",value:{value:"UVP"}}]}if(e.fields){c=[...c,...this.transformFields(e.fields)]}const l=c.reduce(((e,t)=>{e.fields[t.key]=t.value;return e}),{fields:{}});console.log("Constructed fields: ",l);return(await this.Jira.createIssue(l)).key}));return{issues:await Promise.all(p)}}transformFields(e){return Object.keys(e).map((t=>({key:t,value:e[t]})))}async findEslintInPr(e,t){const s=await this.GitHub.getPRDiff(e.full_name,t);const n=/^\+.*(?:\/\/|\/\*)\s+eslint-disable(.*)$/gm;const i=/^\+\+\+.b\/.*$/gm;const o=s.match(n);if(!o||!o.length)return[];return o.map(r.trim).filter(Boolean).map((e=>{const t=s.indexOf(e);const r=s.slice(0,t).match(i);const n=r[r.length-1];return{content:e.slice(e.indexOf("eslint-disable")),route:n}})).filter((e=>(e.route.includes("/src/")||e.route.includes("/modules/")||e.route.includes("/server/"))&&!e.route.includes(".test.")&&!e.route.includes("__specs__")&&!e.route.includes("__analytics__")&&!e.route.includes("__new_specs__")))}}},297:(e,t,s)=>{const{get:r}=s(50);const n=s(526);const i="github";const{format:o}=s(310);const a=s(205)(i);class GitHub{constructor({token:e}){this.baseUrl="https://api.github.com";this.token=e}async getCommitDiff(e,t){return this.fetch("getCommitDiff",{pathname:`/repos/${e}/commits/${t}`},{headers:{Accept:"application/vnd.github.v3.diff"}})}async getPRDiff(e,t){return this.fetch("getCommitDiff",{pathname:`/repos/${e}/pulls/${t}`},{headers:{Accept:"application/vnd.github.v3.diff"}})}async fetch(e,{host:t,pathname:s,query:r},{method:n,body:u,headers:c={}}={}){const l=o({host:t||this.baseUrl,pathname:s,query:r});if(!n){n="GET"}if(c["Content-Type"]===undefined){c["Content-Type"]="application/json"}if(c.Authorization===undefined){c.Authorization=`token ${this.token}`}if(u&&c["Content-Type"]==="application/json"){u=JSON.stringify(u)}const p={req:{method:n,headers:c,body:u,url:l}};try{await a(p,`${i}:${e}`)}catch(e){const t={originError:e,source:"github"};delete p.req.headers;throw Object.assign(new Error("GitHub API error"),p,t)}return p.res.body}}e.exports=GitHub},716:(e,t,s)=>{const{get:r}=s(50);const n="jira";const{format:i}=s(310);const o=s(205)(n);class Jira{constructor({baseUrl:e,token:t,email:s}){this.baseUrl=e;this.token=t;this.email=s}async getCreateMeta(e){return this.fetch("getCreateMeta",{pathname:"/rest/api/2/issue/createmeta",query:e})}async createIssue(e){return this.fetch("createIssue",{pathname:"/rest/api/2/issue"},{method:"POST",body:e})}async getIssue(e,t={}){try{return this.fetch("getIssue",{pathname:`/rest/api/3/issue/${e}`})}catch(e){if(r(e,"res.status")===404){return}throw e}}async getIssueTransitions(e){return this.fetch("getIssueTransitions",{pathname:`/rest/api/2/issue/${e}/transitions`},{method:"GET"})}async transitionIssue(e,t){return this.fetch("transitionIssue",{pathname:`/rest/api/3/issue/${e}/transitions`},{method:"POST",body:t})}async fetch(e,{host:t,pathname:s,query:r},{method:a,body:u,headers:c={}}={}){const l=i({host:t||this.baseUrl,pathname:s,query:r});if(!a){a="GET"}if(c["Content-Type"]===undefined){c["Content-Type"]="application/json"}if(c.Authorization===undefined){c.Authorization=`Basic ${Buffer.from(`${this.email}:${this.token}`).toString("base64")}`}if(u&&c["Content-Type"]==="application/json"){u=JSON.stringify(u)}const p={req:{method:a,headers:c,body:u,url:l}};try{await o(p,`${n}:${e}`)}catch(e){const t={originError:e,source:"jira"};delete p.req.headers;throw Object.assign(new Error("Jira API error"),p,t,{jiraError:p.res.body.errors})}return p.res.body}}e.exports=Jira},205:(e,t,s)=>{const r=s(526);e.exports=e=>async(e,t="unknown")=>{const s=await r(e.req.url,e.req);e.res={headers:s.headers.raw(),status:s.status};e.res.body=await s.text();const n=(s.headers.get("content-type")||"").includes("application/json");if(n&&e.res.body){e.res.body=JSON.parse(e.res.body)}if(!s.ok){throw new Error(s.statusText)}return e}},187:module=>{module.exports=eval("require")("@actions/core")},820:module=>{module.exports=eval("require")("@actions/github")},50:module=>{module.exports=eval("require")("lodash")},526:module=>{module.exports=eval("require")("node-fetch")},918:module=>{module.exports=eval("require")("yaml")},147:e=>{"use strict";e.exports=require("fs")},310:e=>{"use strict";e.exports=require("url")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var s=__webpack_module_cache__[e]={exports:{}};var r=true;try{__webpack_modules__[e](s,s.exports,__nccwpck_require__);r=false}finally{if(r)delete __webpack_module_cache__[e]}return s.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(147);const t=__nccwpck_require__(918);const s=__nccwpck_require__(187);const r=__nccwpck_require__(820);const n=`${process.env.HOME}/.jira.d/config.yml`;const i=`${process.env.HOME}/jira/config.yml`;const o=__nccwpck_require__(693);const a=process.env.GITHUB_TOKEN;const u=r.getOctokit(a);const c=require(process.env.GITHUB_EVENT_PATH);const l=t.parse(e.readFileSync(i,"utf8"));async function exec(){try{const e=await new o({githubEvent:c,argv:parseArgs(),config:l,githubToken:a}).execute();if(e){console.log(`Created issues: ${e.issues}`);s.setOutput("issues",JSON.stringify(e.issues,null,4));return}process.exit(0)}catch(e){console.error(e);process.exit(1)}}function parseArgs(){return{project:s.getInput("project"),issuetype:s.getInput("issuetype"),description:s.getInput("description"),label:s.getInput("label")}}exec()})();module.exports=__webpack_exports__})();